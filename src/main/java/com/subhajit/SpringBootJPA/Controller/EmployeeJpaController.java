package com.subhajit.SpringBootJPA.Controller;

import com.subhajit.SpringBootJPA.Service.EmployeeJsqlService;
import com.subhajit.SpringBootJPA.Service.EmployeeService;
import com.subhajit.SpringBootJPA.oracle1.entity.EmployeeEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class EmployeeJpaController {
    @Autowired
    private EmployeeService employeeService;

    @Autowired
    private EmployeeJsqlService employeeJsqlService;

    //pass an inputs in JSON format under body in Postman and store/add in Table/Pojo of EmployeeEntity

    /**
     * This is the sample JSON to be passed in postman.empId is autogenerated so no need to pass
     * {
     * "empCity" : "Panipat",
     * "empDept" : "IT",
     * "empName" : "Anil",
     * "empState" : "Haryana"
     * }
     * @param employeeEntity
     * @return
     */

    @PostMapping("/addEmployee")
    public ResponseEntity<Void> addEmployee(@RequestBody EmployeeEntity employeeEntity) {
        System.out.println("Employee record to be added: " + employeeEntity);
        return employeeService.addEmployee(employeeEntity);                      //  return new ResponseEntity<>(employeeEntity, HttpStatus.CREATED);
    }

   // QAK: why manual entry added in table is not getting fetched; need commit on DB first
    @GetMapping("/fetchEmployeeRecords")
    public ResponseEntity<List<EmployeeEntity>> fetchAllEmployeeRecords() {
        //return new ResponseEntity(employeeService.fetchAllEmployeeRecords(), HttpStatus.OK);
        return employeeService.fetchAllEmployeeRecords(); //return like this
    }

    @GetMapping("fetchAnEmployeeRecord/{empId}")
    public ResponseEntity<EmployeeEntity> fetchAnEmployeeRecord(@PathVariable("empId") Long empId) {
        return employeeService.fetchAnEmployeeRecord(empId);
    }


    @DeleteMapping("/deleteAnEmployeeById/{empId}")
    public ResponseEntity<Void> deleteAnEmployeeById(@PathVariable("empId") Long empId) {
        return employeeService.deleteAnEmployeeById(empId);
        
    }

    @PutMapping("/updateAnEmployeeById/{empId}")
    public ResponseEntity<Void> updateAnEmployeeById(@PathVariable Long empId, @RequestBody EmployeeEntity employeeEntity) {
        return employeeService.updateAnEmployeeById(empId, employeeEntity);
    }

    /*****Using JQL and SQL
     * JPQL
     */

    @GetMapping("/fetchAllRecordsWithJpql")
    public ResponseEntity<List<EmployeeEntity>> fetchAllEmployeeRecordsWithJpql() {
        System.out.println("Processing incoming Jpql request.. ");
        if(employeeJsqlService.fetchAllEmployeeRecordsWithJpql()==null){
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        }
        return employeeJsqlService.fetchAllEmployeeRecordsWithJpql();
    }

    //QAK -why no logs/error message when empId =null
    @GetMapping("/fetchDataJPQL/{empId}")      //if empId ==null ( it will automatically check and return HTTP 404 bad request.)
    public ResponseEntity<EmployeeEntity> fetchDataJPQL(@PathVariable Long empId) {
        System.out.println("Processing incoming Jpql request.. ");
//        if (empId == null) {
//            System.out.println("empId is null");
//            return new ResponseEntity<>(HttpStatus.BAD_REQUEST); // Or return ResponseEntity.badRequest().build();   //It returns an HTTP 400 response with an empty body, indicating the client sent an invalid request.
//        }
        System.out.println("Executing the Jpql request for empId: " + empId);
        return employeeJsqlService.fetchDataJPQL(empId);
    }
    //JPQL doesn't support an Insert statement
//    @PostMapping("/addEmployeeRecordByJpql")
//    public ResponseEntity<Void> addEmployeeRecordByJpql(@RequestBody EmployeeEntity employeeEntity) {
//        System.out.println("Employee Record to be added in Employee_Record Table: " + employeeEntity);
//        return employeeJsqlService.addEmployeeRecord(employeeEntity);      //  return new ResponseEntity<>(employeeEntity, HttpStatus.CREATED);
//    }

    //Update an employeeRecord
    @PutMapping("/updateAnEmployeeByIdWithJpql/{empId}")
    public ResponseEntity<Void> updateAnEmployeeByIdWithJpql(@PathVariable Long empId, @RequestBody EmployeeEntity employeeEntity) {
        System.out.println("Employee Record to be updated for empId:: " + empId);
        return employeeJsqlService.updateAnEmployeeById(empId, employeeEntity);
    }

    //Delete an employeeRecord
    @DeleteMapping("/deleteAnEmployeeByIdWithJpql/{empId}")
    public ResponseEntity<Void> deleteAnEmployeeByIdWithJpql(@PathVariable Long empId) {
        System.out.println("Employee Record to be deleted for empId:: " + empId);
        return employeeJsqlService.deleteAnEmployeeById(empId);
    }


    /*** Using SQL ****/

    @GetMapping("/fetchDataSQL/{empId}")
    public ResponseEntity<EmployeeEntity> fetchDataSQL(@PathVariable(required = true) Long empId) {
        return employeeJsqlService.fetchDataSQL(empId);
    }
}
